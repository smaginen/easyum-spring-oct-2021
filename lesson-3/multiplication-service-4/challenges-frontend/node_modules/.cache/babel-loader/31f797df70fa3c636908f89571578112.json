{"ast":null,"code":"import _classCallCheck from\"/Users/evgenijsmagin/IdeaProjects/easyum-spring-oct-2021/lesson-3/multiplication-service-4/challenges-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/evgenijsmagin/IdeaProjects/easyum-spring-oct-2021/lesson-3/multiplication-service-4/challenges-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _createSuper from\"/Users/evgenijsmagin/IdeaProjects/easyum-spring-oct-2021/lesson-3/multiplication-service-4/challenges-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import _inherits from\"/Users/evgenijsmagin/IdeaProjects/easyum-spring-oct-2021/lesson-3/multiplication-service-4/challenges-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import*as React from'react';import GameApiClient from'../services/GameApiClient';import ChallengesApiClient from'../services/ChallengesApiClient';var LeaderBoardComponent=/*#__PURE__*/function(_React$Component){_inherits(LeaderBoardComponent,_React$Component);var _super=_createSuper(LeaderBoardComponent);function LeaderBoardComponent(props){var _this;_classCallCheck(this,LeaderBoardComponent);_this=_super.call(this,props);_this.state={leaderboard:[],serverError:false};return _this;}_createClass(LeaderBoardComponent,[{key:\"componentDidMount\",value:function componentDidMount(){this.refreshLeaderBoard();// sets a timer to refresh the leaderboard every 5 seconds\nsetInterval(this.refreshLeaderBoard.bind(this),5000);}},{key:\"getLeaderBoardData\",value:function getLeaderBoardData(){return GameApiClient.leaderBoard().then(function(lbRes){if(lbRes.ok){return lbRes.json();}else{return Promise.reject(\"Gamification: error response\");}});}},{key:\"getUserAliasData\",value:function getUserAliasData(userIds){return ChallengesApiClient.getUsers(userIds).then(function(usRes){if(usRes.ok){return usRes.json();}else{return Promise.reject(\"Multiplication: error response\");}});}},{key:\"updateLeaderBoard\",value:function updateLeaderBoard(lb){this.setState({leaderboard:lb,// reset the flag\nserverError:false});}},{key:\"refreshLeaderBoard\",value:function refreshLeaderBoard(){var _this2=this;this.getLeaderBoardData().then(function(lbData){var userIds=lbData.map(function(row){return row.userId;});if(userIds.length>0){_this2.getUserAliasData(userIds).then(function(data){// build a map of id -> alias\nvar userMap=new Map();data.forEach(function(idAlias){userMap.set(idAlias.id,idAlias.alias);});// add a property to existing lb data\nlbData.forEach(function(row){return row['alias']=userMap.get(row.userId);});_this2.updateLeaderBoard(lbData);}).catch(function(reason){console.log('Error mapping user ids',reason);_this2.updateLeaderBoard(lbData);});}}).catch(function(reason){_this2.setState({serverError:true});console.log('Gamification server error',reason);});}},{key:\"render\",value:function render(){if(this.state.serverError){return/*#__PURE__*/React.createElement(\"div\",null,\"We're sorry, but we can't display game statistics at this moment.\");}return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h3\",null,\"Leaderboard\"),/*#__PURE__*/React.createElement(\"table\",null,/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"User\"),/*#__PURE__*/React.createElement(\"th\",null,\"Score\"),/*#__PURE__*/React.createElement(\"th\",null,\"Badges\"))),/*#__PURE__*/React.createElement(\"tbody\",null,this.state.leaderboard.map(function(row){return/*#__PURE__*/React.createElement(\"tr\",{key:row.userId},/*#__PURE__*/React.createElement(\"td\",null,row.alias?row.alias:row.userId),/*#__PURE__*/React.createElement(\"td\",null,row.totalScore),/*#__PURE__*/React.createElement(\"td\",null,row.badges.map(function(b){return/*#__PURE__*/React.createElement(\"span\",{className:\"badge\",key:b},b);})));}))));}}]);return LeaderBoardComponent;}(React.Component);export default LeaderBoardComponent;","map":{"version":3,"sources":["/Users/evgenijsmagin/IdeaProjects/easyum-spring-oct-2021/lesson-3/multiplication-service-4/challenges-frontend/src/components/LeaderBoardComponent.js"],"names":["React","GameApiClient","ChallengesApiClient","LeaderBoardComponent","props","state","leaderboard","serverError","refreshLeaderBoard","setInterval","bind","leaderBoard","then","lbRes","ok","json","Promise","reject","userIds","getUsers","usRes","lb","setState","getLeaderBoardData","lbData","map","row","userId","length","getUserAliasData","data","userMap","Map","forEach","idAlias","set","id","alias","get","updateLeaderBoard","catch","reason","console","log","totalScore","badges","b","Component"],"mappings":"o4BAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,MAAOC,CAAAA,aAAP,KAA0B,2BAA1B,CACA,MAAOC,CAAAA,mBAAP,KAAgC,iCAAhC,C,GAEMC,CAAAA,oB,wIAEF,8BAAYC,KAAZ,CAAmB,sDACf,uBAAMA,KAAN,EACA,MAAKC,KAAL,CAAa,CACTC,WAAW,CAAE,EADJ,CAETC,WAAW,CAAE,KAFJ,CAAb,CAFe,aAMlB,C,8FAEmB,CAChB,KAAKC,kBAAL,GACA;AACAC,WAAW,CAAC,KAAKD,kBAAL,CAAwBE,IAAxB,CAA6B,IAA7B,CAAD,CAAqC,IAArC,CAAX,CACH,C,+DAE6B,CAC1B,MAAOT,CAAAA,aAAa,CAACU,WAAd,GAA4BC,IAA5B,CACH,SAAAC,KAAK,CAAI,CACL,GAAIA,KAAK,CAACC,EAAV,CAAc,CACV,MAAOD,CAAAA,KAAK,CAACE,IAAN,EAAP,CACH,CAFD,IAEO,CACH,MAAOC,CAAAA,OAAO,CAACC,MAAR,CAAe,8BAAf,CAAP,CACH,CACJ,CAPE,CAAP,CASH,C,0DAEgBC,O,CAA4B,CACzC,MAAOhB,CAAAA,mBAAmB,CAACiB,QAApB,CAA6BD,OAA7B,EAAsCN,IAAtC,CACH,SAAAQ,KAAK,CAAI,CACL,GAAGA,KAAK,CAACN,EAAT,CAAa,CACT,MAAOM,CAAAA,KAAK,CAACL,IAAN,EAAP,CACH,CAFD,IAEO,CACH,MAAOC,CAAAA,OAAO,CAACC,MAAR,CAAe,gCAAf,CAAP,CACH,CACJ,CAPE,CAAP,CASH,C,4DAEiBI,E,CAAI,CAClB,KAAKC,QAAL,CAAc,CACVhB,WAAW,CAAEe,EADH,CAEV;AACAd,WAAW,CAAE,KAHH,CAAd,EAKH,C,+DAEoB,iBACjB,KAAKgB,kBAAL,GAA0BX,IAA1B,CACI,SAAAY,MAAM,CAAI,CACN,GAAIN,CAAAA,OAAO,CAAGM,MAAM,CAACC,GAAP,CAAW,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,MAAR,EAAd,CAAd,CACA,GAAGT,OAAO,CAACU,MAAR,CAAiB,CAApB,CAAuB,CACnB,MAAI,CAACC,gBAAL,CAAsBX,OAAtB,EAA+BN,IAA/B,CAAoC,SAAAkB,IAAI,CAAI,CACxC;AACA,GAAIC,CAAAA,OAAO,CAAG,GAAIC,CAAAA,GAAJ,EAAd,CACAF,IAAI,CAACG,OAAL,CAAa,SAAAC,OAAO,CAAI,CACpBH,OAAO,CAACI,GAAR,CAAYD,OAAO,CAACE,EAApB,CAAwBF,OAAO,CAACG,KAAhC,EACH,CAFD,EAGA;AACAb,MAAM,CAACS,OAAP,CAAe,SAAAP,GAAG,QACdA,CAAAA,GAAG,CAAC,OAAD,CAAH,CAAeK,OAAO,CAACO,GAAR,CAAYZ,GAAG,CAACC,MAAhB,CADD,EAAlB,EAGA,MAAI,CAACY,iBAAL,CAAuBf,MAAvB,EACH,CAXD,EAWGgB,KAXH,CAWS,SAAAC,MAAM,CAAI,CACfC,OAAO,CAACC,GAAR,CAAY,wBAAZ,CAAsCF,MAAtC,EACA,MAAI,CAACF,iBAAL,CAAuBf,MAAvB,EACH,CAdD,EAeH,CACJ,CApBL,EAqBEgB,KArBF,CAqBQ,SAAAC,MAAM,CAAI,CACd,MAAI,CAACnB,QAAL,CAAc,CAAEf,WAAW,CAAE,IAAf,CAAd,EACAmC,OAAO,CAACC,GAAR,CAAY,2BAAZ,CAAyCF,MAAzC,EACH,CAxBD,EAyBH,C,uCAEQ,CACL,GAAI,KAAKpC,KAAL,CAAWE,WAAf,CAA4B,CACxB,mBACI,mGADJ,CAIH,CACD,mBACI,4CACI,4CADJ,cAEI,8CACI,8CACA,2CACI,qCADJ,cAEI,sCAFJ,cAGI,uCAHJ,CADA,CADJ,cAQI,iCACC,KAAKF,KAAL,CAAWC,WAAX,CAAuBmB,GAAvB,CAA2B,SAAAC,GAAG,qBAAI,0BAAI,GAAG,CAAEA,GAAG,CAACC,MAAb,eAC/B,8BAAKD,GAAG,CAACW,KAAJ,CAAYX,GAAG,CAACW,KAAhB,CAAwBX,GAAG,CAACC,MAAjC,CAD+B,cAE/B,8BAAKD,GAAG,CAACkB,UAAT,CAF+B,cAG/B,8BAAKlB,GAAG,CAACmB,MAAJ,CAAWpB,GAAX,CACD,SAAAqB,CAAC,qBAAI,4BAAM,SAAS,CAAC,OAAhB,CAAwB,GAAG,CAAEA,CAA7B,EAAiCA,CAAjC,CAAJ,EADA,CAAL,CAH+B,CAAJ,EAA9B,CADD,CARJ,CAFJ,CADJ,CAuBH,C,kCA1G8B9C,KAAK,CAAC+C,S,EA6GzC,cAAe5C,CAAAA,oBAAf","sourcesContent":["import * as React from 'react';\nimport GameApiClient from '../services/GameApiClient';\nimport ChallengesApiClient from '../services/ChallengesApiClient';\n\nclass LeaderBoardComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            leaderboard: [],\n            serverError: false\n        }\n    }\n\n    componentDidMount() {\n        this.refreshLeaderBoard();\n        // sets a timer to refresh the leaderboard every 5 seconds\n        setInterval(this.refreshLeaderBoard.bind(this), 5000);\n    }\n\n    getLeaderBoardData(): Promise {\n        return GameApiClient.leaderBoard().then(\n            lbRes => {\n                if (lbRes.ok) {\n                    return lbRes.json();\n                } else {\n                    return Promise.reject(\"Gamification: error response\");\n                }\n            }\n        );\n    }\n\n    getUserAliasData(userIds: number[]): Promise {\n        return ChallengesApiClient.getUsers(userIds).then(\n            usRes => {\n                if(usRes.ok) {\n                    return usRes.json();\n                } else {\n                    return Promise.reject(\"Multiplication: error response\");\n                }\n            }\n        )\n    }\n\n    updateLeaderBoard(lb) {\n        this.setState({\n            leaderboard: lb,\n            // reset the flag\n            serverError: false\n        });\n    }\n\n    refreshLeaderBoard() {\n        this.getLeaderBoardData().then(\n            lbData => {\n                let userIds = lbData.map(row => row.userId);\n                if(userIds.length > 0) {\n                    this.getUserAliasData(userIds).then(data => {\n                        // build a map of id -> alias\n                        let userMap = new Map();\n                        data.forEach(idAlias => {\n                            userMap.set(idAlias.id, idAlias.alias);\n                        });\n                        // add a property to existing lb data\n                        lbData.forEach(row =>\n                            row['alias'] = userMap.get(row.userId)\n                        );\n                        this.updateLeaderBoard(lbData);\n                    }).catch(reason => {\n                        console.log('Error mapping user ids', reason);\n                        this.updateLeaderBoard(lbData);\n                    });\n                }\n            }\n        ).catch(reason => {\n            this.setState({ serverError: true });\n            console.log('Gamification server error', reason);\n        });\n    }\n\n    render() {\n        if (this.state.serverError) {\n            return (\n                <div>We're sorry, but we can't display game statistics at this\n                    moment.</div>\n            );\n        }\n        return (\n            <div>\n                <h3>Leaderboard</h3>\n                <table>\n                    <thead>\n                    <tr>\n                        <th>User</th>\n                        <th>Score</th>\n                        <th>Badges</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.state.leaderboard.map(row => <tr key={row.userId}>\n                        <td>{row.alias ? row.alias : row.userId}</td>\n                        <td>{row.totalScore}</td>\n                        <td>{row.badges.map(\n                            b => <span className=\"badge\" key={b}>{b}</span>)}\n                        </td>\n                    </tr>)}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nexport default LeaderBoardComponent;\n"]},"metadata":{},"sourceType":"module"}
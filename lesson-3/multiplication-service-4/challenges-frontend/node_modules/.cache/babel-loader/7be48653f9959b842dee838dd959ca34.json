{"ast":null,"code":"import axios from 'axios';\n\nclass ChallengesApiClient {\n  static challenge() {\n    return fetch(ChallengesApiClient.SERVER_URL + ChallengesApiClient.GET_CHALLENGE);\n  }\n\n  static sendGuess(user, a, b, guess) {\n    const headers = new Headers({\n      'Authorization': '0ZHJadMU0KI6'\n    });\n    const options = {\n      headers,\n      credentials: \"include\" // Вот, что нужно задать\n\n    };\n    return fetch.post(ChallengesApiClient.SERVER_URL + ChallengesApiClient.POST_RESULT, {\n      userAlias: user,\n      factorA: a,\n      factorB: b,\n      guess: guess\n    }, {\n      'Content-Type': 'application/json'\n    });\n  }\n\n  static getAttempts(userAlias) {\n    return fetch(ChallengesApiClient.SERVER_URL + ChallengesApiClient.GET_ATTEMPTS_BY_ALIAS + userAlias);\n  }\n\n  static getUsers(userIds) {\n    return fetch(ChallengesApiClient.SERVER_URL + ChallengesApiClient.GET_USERS_BY_IDS + '/' + userIds.join(','));\n  }\n\n}\n\nChallengesApiClient.SERVER_URL = 'http://localhost:8080';\nChallengesApiClient.GET_CHALLENGE = '/challenges/random';\nChallengesApiClient.POST_RESULT = '/attempts';\nChallengesApiClient.GET_ATTEMPTS_BY_ALIAS = '/attempts?alias=';\nChallengesApiClient.GET_USERS_BY_IDS = '/users';\nexport default ChallengesApiClient;","map":{"version":3,"sources":["/Users/evgenijsmagin/IdeaProjects/easyum-spring-oct-2021/lesson-3/multiplication-service-4/challenges-frontend/src/services/ChallengesApiClient.js"],"names":["axios","ChallengesApiClient","challenge","fetch","SERVER_URL","GET_CHALLENGE","sendGuess","user","a","b","guess","headers","Headers","options","credentials","post","POST_RESULT","userAlias","factorA","factorB","getAttempts","GET_ATTEMPTS_BY_ALIAS","getUsers","userIds","GET_USERS_BY_IDS","join"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,MAAMC,mBAAN,CAA0B;AAQtB,SAAOC,SAAP,GAAsC;AAClC,WAAOC,KAAK,CAACF,mBAAmB,CAACG,UAApB,GACTH,mBAAmB,CAACI,aADZ,CAAZ;AAEH;;AAED,SAAOC,SAAP,CAAiBC,IAAjB,EACiBC,CADjB,EAEiBC,CAFjB,EAGiBC,KAHjB,EAGmD;AAC/C,UAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY;AACxB,uBAAiB;AADO,KAAZ,CAAhB;AAGA,UAAMC,OAAO,GAAG;AACZF,MAAAA,OADY;AAEZG,MAAAA,WAAW,EAAC,SAFA,CAEU;;AAFV,KAAhB;AAIA,WAAOX,KAAK,CAACY,IAAN,CAAWd,mBAAmB,CAACG,UAApB,GACdH,mBAAmB,CAACe,WADjB,EAGK;AACIC,MAAAA,SAAS,EAAEV,IADf;AAEIW,MAAAA,OAAO,EAAEV,CAFb;AAGIW,MAAAA,OAAO,EAAEV,CAHb;AAIIC,MAAAA,KAAK,EAAEA;AAJX,KAHL,EAUC;AACJ,sBAAgB;AADZ,KAVD,CAAP;AAaH;;AAED,SAAOU,WAAP,CAAmBH,SAAnB,EAAyD;AACrD,WAAOd,KAAK,CAACF,mBAAmB,CAACG,UAApB,GACTH,mBAAmB,CAACoB,qBADX,GACmCJ,SADpC,CAAZ;AAEH;;AAED,SAAOK,QAAP,CAAgBC,OAAhB,EAAsD;AAClD,WAAOpB,KAAK,CAACF,mBAAmB,CAACG,UAApB,GACTH,mBAAmB,CAACuB,gBADX,GAET,GAFS,GAEHD,OAAO,CAACE,IAAR,CAAa,GAAb,CAFE,CAAZ;AAGH;;AAhDqB;;AAApBxB,mB,CAEKG,U,GAAa,uB;AAFlBH,mB,CAGKI,a,GAAgB,oB;AAHrBJ,mB,CAIKe,W,GAAc,W;AAJnBf,mB,CAKKoB,qB,GAAwB,kB;AAL7BpB,mB,CAMKuB,gB,GAAmB,Q;AA6C9B,eAAevB,mBAAf","sourcesContent":["import axios from 'axios';\nclass ChallengesApiClient {\n\n    static SERVER_URL = 'http://localhost:8080';\n    static GET_CHALLENGE = '/challenges/random';\n    static POST_RESULT = '/attempts';\n    static GET_ATTEMPTS_BY_ALIAS = '/attempts?alias=';\n    static GET_USERS_BY_IDS = '/users';\n\n    static challenge(): Promise<Response> {\n        return fetch(ChallengesApiClient.SERVER_URL +\n            ChallengesApiClient.GET_CHALLENGE);\n    }\n\n    static sendGuess(user: string,\n                     a: number,\n                     b: number,\n                     guess: number): Promise<Response> {\n        const headers = new Headers({\n            'Authorization': '0ZHJadMU0KI6'\n        });\n        const options = {\n            headers,\n            credentials:\"include\" // Вот, что нужно задать\n        };\n        return fetch.post(ChallengesApiClient.SERVER_URL +\n            ChallengesApiClient.POST_RESULT,\n\n                    {\n                        userAlias: user,\n                        factorA: a,\n                        factorB: b,\n                        guess: guess\n                    }\n\n            ,   {\n            'Content-Type': 'application/json',\n        });\n    }\n\n    static getAttempts(userAlias: string): Promise<Response> {\n        return fetch(ChallengesApiClient.SERVER_URL +\n            ChallengesApiClient.GET_ATTEMPTS_BY_ALIAS + userAlias);\n    }\n\n    static getUsers(userIds: number[]): Promise<Response> {\n        return fetch(ChallengesApiClient.SERVER_URL +\n            ChallengesApiClient.GET_USERS_BY_IDS +\n            '/' + userIds.join(','));\n    }\n}\n\nexport default ChallengesApiClient;\n"]},"metadata":{},"sourceType":"module"}
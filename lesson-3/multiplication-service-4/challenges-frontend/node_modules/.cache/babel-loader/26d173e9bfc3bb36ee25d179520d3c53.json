{"ast":null,"code":"var _jsxFileName = \"/Users/evgenijsmagin/IdeaProjects/easyum-spring-oct-2021/lesson-3/multiplication-service-4/challenges-frontend/src/components/LeaderBoardComponent.js\";\nimport * as React from 'react';\nimport GameApiClient from '../services/GameApiClient';\nimport ChallengesApiClient from '../services/ChallengesApiClient';\n\nclass LeaderBoardComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      leaderboard: [],\n      serverError: false\n    };\n  }\n\n  componentDidMount() {\n    this.refreshLeaderBoard(); // sets a timer to refresh the leaderboard every 5 seconds\n\n    setInterval(this.refreshLeaderBoard.bind(this), 5000);\n  }\n\n  getLeaderBoardData() {\n    return GameApiClient.leaderBoard().then(lbRes => {\n      if (lbRes.ok) {\n        return lbRes.json();\n      } else {\n        return Promise.reject(\"Gamification: error response\");\n      }\n    });\n  }\n\n  getUserAliasData(userIds) {\n    return ChallengesApiClient.getUsers(userIds).then(usRes => {\n      if (usRes.ok) {\n        return usRes.json();\n      } else {\n        return Promise.reject(\"Multiplication: error response\");\n      }\n    });\n  }\n\n  updateLeaderBoard(lb) {\n    this.setState({\n      leaderboard: lb,\n      // reset the flag\n      serverError: false\n    });\n  }\n\n  refreshLeaderBoard() {\n    this.getLeaderBoardData().then(lbData => {\n      let userIds = lbData.map(row => row.userId);\n\n      if (userIds.length > 0) {\n        this.getUserAliasData(userIds).then(data => {\n          // build a map of id -> alias\n          let userMap = new Map();\n          data.forEach(idAlias => {\n            userMap.set(idAlias.id, idAlias.alias);\n          }); // add a property to existing lb data\n\n          lbData.forEach(row => row['alias'] = userMap.get(row.userId));\n          this.updateLeaderBoard(lbData);\n        }).catch(reason => {\n          console.log('Error mapping user ids', reason);\n          this.updateLeaderBoard(lbData);\n        });\n      }\n    }).catch(reason => {\n      this.setState({\n        serverError: true\n      });\n      console.log('Gamification server error', reason);\n    });\n  }\n\n  render() {\n    if (this.state.serverError) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }\n      }, \"We're sorry, but we can't display game statistics at this moment.\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }, \"Leaderboard\"), /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 25\n      }\n    }, \"User\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 25\n      }\n    }, \"Score\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 25\n      }\n    }, \"Badges\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }\n    }, this.state.leaderboard.map(row => /*#__PURE__*/React.createElement(\"tr\", {\n      key: row.userId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 56\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 25\n      }\n    }, row.alias ? row.alias : row.userId), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 25\n      }\n    }, row.totalScore), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 25\n      }\n    }, row.badges.map(b => /*#__PURE__*/React.createElement(\"span\", {\n      className: \"badge\",\n      key: b,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 34\n      }\n    }, b))))))));\n  }\n\n}\n\nexport default LeaderBoardComponent;","map":{"version":3,"sources":["/Users/evgenijsmagin/IdeaProjects/easyum-spring-oct-2021/lesson-3/multiplication-service-4/challenges-frontend/src/components/LeaderBoardComponent.js"],"names":["React","GameApiClient","ChallengesApiClient","LeaderBoardComponent","Component","constructor","props","state","leaderboard","serverError","componentDidMount","refreshLeaderBoard","setInterval","bind","getLeaderBoardData","leaderBoard","then","lbRes","ok","json","Promise","reject","getUserAliasData","userIds","getUsers","usRes","updateLeaderBoard","lb","setState","lbData","map","row","userId","length","data","userMap","Map","forEach","idAlias","set","id","alias","get","catch","reason","console","log","render","totalScore","badges","b"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport GameApiClient from '../services/GameApiClient';\nimport ChallengesApiClient from '../services/ChallengesApiClient';\n\nclass LeaderBoardComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            leaderboard: [],\n            serverError: false\n        }\n    }\n\n    componentDidMount() {\n        this.refreshLeaderBoard();\n        // sets a timer to refresh the leaderboard every 5 seconds\n        setInterval(this.refreshLeaderBoard.bind(this), 5000);\n    }\n\n    getLeaderBoardData(): Promise {\n        return GameApiClient.leaderBoard().then(\n            lbRes => {\n                if (lbRes.ok) {\n                    return lbRes.json();\n                } else {\n                    return Promise.reject(\"Gamification: error response\");\n                }\n            }\n        );\n    }\n\n    getUserAliasData(userIds: number[]): Promise {\n        return ChallengesApiClient.getUsers(userIds).then(\n            usRes => {\n                if(usRes.ok) {\n                    return usRes.json();\n                } else {\n                    return Promise.reject(\"Multiplication: error response\");\n                }\n            }\n        )\n    }\n\n    updateLeaderBoard(lb) {\n        this.setState({\n            leaderboard: lb,\n            // reset the flag\n            serverError: false\n        });\n    }\n\n    refreshLeaderBoard() {\n        this.getLeaderBoardData().then(\n            lbData => {\n                let userIds = lbData.map(row => row.userId);\n                if(userIds.length > 0) {\n                    this.getUserAliasData(userIds).then(data => {\n                        // build a map of id -> alias\n                        let userMap = new Map();\n                        data.forEach(idAlias => {\n                            userMap.set(idAlias.id, idAlias.alias);\n                        });\n                        // add a property to existing lb data\n                        lbData.forEach(row =>\n                            row['alias'] = userMap.get(row.userId)\n                        );\n                        this.updateLeaderBoard(lbData);\n                    }).catch(reason => {\n                        console.log('Error mapping user ids', reason);\n                        this.updateLeaderBoard(lbData);\n                    });\n                }\n            }\n        ).catch(reason => {\n            this.setState({ serverError: true });\n            console.log('Gamification server error', reason);\n        });\n    }\n\n    render() {\n        if (this.state.serverError) {\n            return (\n                <div>We're sorry, but we can't display game statistics at this\n                    moment.</div>\n            );\n        }\n        return (\n            <div>\n                <h3>Leaderboard</h3>\n                <table>\n                    <thead>\n                    <tr>\n                        <th>User</th>\n                        <th>Score</th>\n                        <th>Badges</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.state.leaderboard.map(row => <tr key={row.userId}>\n                        <td>{row.alias ? row.alias : row.userId}</td>\n                        <td>{row.totalScore}</td>\n                        <td>{row.badges.map(\n                            b => <span className=\"badge\" key={b}>{b}</span>)}\n                        </td>\n                    </tr>)}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nexport default LeaderBoardComponent;\n"]},"metadata":{},"sourceType":"module"}
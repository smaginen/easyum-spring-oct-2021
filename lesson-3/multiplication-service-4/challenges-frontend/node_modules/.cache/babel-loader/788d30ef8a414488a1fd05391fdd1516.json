{"ast":null,"code":"import _classCallCheck from\"/Users/evgenijsmagin/IdeaProjects/easyum-spring-oct-2021/lesson-3/multiplication-service-4/challenges-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/evgenijsmagin/IdeaProjects/easyum-spring-oct-2021/lesson-3/multiplication-service-4/challenges-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import axios from'axios';import cors from'cors';var ChallengesApiClient=/*#__PURE__*/function(){function ChallengesApiClient(){_classCallCheck(this,ChallengesApiClient);}_createClass(ChallengesApiClient,null,[{key:\"challenge\",value:function challenge(){return axios(ChallengesApiClient.SERVER_URL+ChallengesApiClient.GET_CHALLENGE);}},{key:\"sendGuess\",value:function sendGuess(user,a,b,guess){return fetch(ChallengesApiClient.SERVER_URL+ChallengesApiClient.POST_RESULT,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({userAlias:user,factorA:a,factorB:b,guess:guess})});}},{key:\"getAttempts\",value:function getAttempts(userAlias){return fetch(ChallengesApiClient.SERVER_URL+ChallengesApiClient.GET_ATTEMPTS_BY_ALIAS+userAlias);}},{key:\"getUsers\",value:function getUsers(userIds){return fetch(ChallengesApiClient.SERVER_URL+ChallengesApiClient.GET_USERS_BY_IDS+'/'+userIds.join(','));}}]);return ChallengesApiClient;}();ChallengesApiClient.SERVER_URL='http://localhost:8080';ChallengesApiClient.GET_CHALLENGE='/challenges/random';ChallengesApiClient.POST_RESULT='/attempts';ChallengesApiClient.GET_ATTEMPTS_BY_ALIAS='/attempts?alias=';ChallengesApiClient.GET_USERS_BY_IDS='/users';export default ChallengesApiClient;","map":{"version":3,"sources":["/Users/evgenijsmagin/IdeaProjects/easyum-spring-oct-2021/lesson-3/multiplication-service-4/challenges-frontend/src/services/ChallengesApiClient.js"],"names":["axios","cors","ChallengesApiClient","SERVER_URL","GET_CHALLENGE","user","a","b","guess","fetch","POST_RESULT","method","headers","body","JSON","stringify","userAlias","factorA","factorB","GET_ATTEMPTS_BY_ALIAS","userIds","GET_USERS_BY_IDS","join"],"mappings":"wcAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,IAAP,KAAiB,MAAjB,C,GACMC,CAAAA,mB,qLAQoC,CAClC,MAAOF,CAAAA,KAAK,CAACE,mBAAmB,CAACC,UAApB,CACTD,mBAAmB,CAACE,aADZ,CAAZ,CAEH,C,4CAEgBC,I,CACAC,C,CACAC,C,CACAC,K,CAAkC,CAC/C,MAAOC,CAAAA,KAAK,CAACP,mBAAmB,CAACC,UAApB,CACTD,mBAAmB,CAACQ,WADZ,CAER,CACIC,MAAM,CAAE,MADZ,CAEIC,OAAO,CAAE,CACL,eAAgB,kBADX,CAFb,CAKIC,IAAI,CAAEC,IAAI,CAACC,SAAL,CACF,CACIC,SAAS,CAAEX,IADf,CAEIY,OAAO,CAAEX,CAFb,CAGIY,OAAO,CAAEX,CAHb,CAIIC,KAAK,CAAEA,KAJX,CADE,CALV,CAFQ,CAAZ,CAgBH,C,gDAEkBQ,S,CAAsC,CACrD,MAAOP,CAAAA,KAAK,CAACP,mBAAmB,CAACC,UAApB,CACTD,mBAAmB,CAACiB,qBADX,CACmCH,SADpC,CAAZ,CAEH,C,0CAEeI,O,CAAsC,CAClD,MAAOX,CAAAA,KAAK,CAACP,mBAAmB,CAACC,UAApB,CACTD,mBAAmB,CAACmB,gBADX,CAET,GAFS,CAEHD,OAAO,CAACE,IAAR,CAAa,GAAb,CAFE,CAAZ,CAGH,C,mCA5CCpB,mB,CAEKC,U,CAAa,uB,CAFlBD,mB,CAGKE,a,CAAgB,oB,CAHrBF,mB,CAIKQ,W,CAAc,W,CAJnBR,mB,CAKKiB,qB,CAAwB,kB,CAL7BjB,mB,CAMKmB,gB,CAAmB,Q,CAyC9B,cAAenB,CAAAA,mBAAf","sourcesContent":["import axios from 'axios';\nimport cors from 'cors';\nclass ChallengesApiClient {\n\n    static SERVER_URL = 'http://localhost:8080';\n    static GET_CHALLENGE = '/challenges/random';\n    static POST_RESULT = '/attempts';\n    static GET_ATTEMPTS_BY_ALIAS = '/attempts?alias=';\n    static GET_USERS_BY_IDS = '/users';\n\n    static challenge(): Promise<Response> {\n        return axios(ChallengesApiClient.SERVER_URL +\n            ChallengesApiClient.GET_CHALLENGE);\n    }\n\n    static sendGuess(user: string,\n                     a: number,\n                     b: number,\n                     guess: number): Promise<Response> {\n        return fetch(ChallengesApiClient.SERVER_URL +\n            ChallengesApiClient.POST_RESULT,\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(\n                    {\n                        userAlias: user,\n                        factorA: a,\n                        factorB: b,\n                        guess: guess\n                    }\n                )\n            });\n    }\n\n    static getAttempts(userAlias: string): Promise<Response> {\n        return fetch(ChallengesApiClient.SERVER_URL +\n            ChallengesApiClient.GET_ATTEMPTS_BY_ALIAS + userAlias);\n    }\n\n    static getUsers(userIds: number[]): Promise<Response> {\n        return fetch(ChallengesApiClient.SERVER_URL +\n            ChallengesApiClient.GET_USERS_BY_IDS +\n            '/' + userIds.join(','));\n    }\n}\n\nexport default ChallengesApiClient;\n"]},"metadata":{},"sourceType":"module"}
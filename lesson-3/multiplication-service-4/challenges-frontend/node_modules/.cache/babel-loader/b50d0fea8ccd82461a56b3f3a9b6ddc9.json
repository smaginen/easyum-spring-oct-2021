{"ast":null,"code":"import axios from 'axios';\n\nclass ChallengesApiClient {\n  static challenge() {\n    return fetch(ChallengesApiClient.SERVER_URL + ChallengesApiClient.GET_CHALLENGE);\n  }\n\n  static sendGuess(user, a, b, guess) {\n    const headers = new Headers({\n      'Authorization': '0ZHJadMU0KI6'\n    });\n    const options = {\n      headers,\n      credentials: \"include\" // Вот, что нужно задать\n\n    };\n    let config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        'Access-Control-Allow-Origin': '*'\n      }\n    };\n    return axios.post(ChallengesApiClient.SERVER_URL + ChallengesApiClient.POST_RESULT, {\n      crossDomain: true,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      },\n      body: JSON.stringify({\n        userAlias: user,\n        factorA: a,\n        factorB: b,\n        guess: guess\n      })\n    }).then(response => response.json()).catch(r => {\n      return {};\n    });\n  }\n\n  static getAttempts(userAlias) {\n    return fetch(ChallengesApiClient.SERVER_URL + ChallengesApiClient.GET_ATTEMPTS_BY_ALIAS + userAlias);\n  }\n\n  static getUsers(userIds) {\n    return fetch(ChallengesApiClient.SERVER_URL + ChallengesApiClient.GET_USERS_BY_IDS + '/' + userIds.join(','));\n  }\n\n}\n\nChallengesApiClient.SERVER_URL = 'http://localhost:8080';\nChallengesApiClient.GET_CHALLENGE = '/challenges/random';\nChallengesApiClient.POST_RESULT = '/attempts';\nChallengesApiClient.GET_ATTEMPTS_BY_ALIAS = '/attempts?alias=';\nChallengesApiClient.GET_USERS_BY_IDS = '/users';\nexport default ChallengesApiClient;","map":{"version":3,"sources":["/Users/evgenijsmagin/IdeaProjects/easyum-spring-oct-2021/lesson-3/multiplication-service-4/challenges-frontend/src/services/ChallengesApiClient.js"],"names":["axios","ChallengesApiClient","challenge","fetch","SERVER_URL","GET_CHALLENGE","sendGuess","user","a","b","guess","headers","Headers","options","credentials","config","post","POST_RESULT","crossDomain","method","body","JSON","stringify","userAlias","factorA","factorB","then","response","json","catch","r","getAttempts","GET_ATTEMPTS_BY_ALIAS","getUsers","userIds","GET_USERS_BY_IDS","join"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,MAAMC,mBAAN,CAA0B;AAQtB,SAAOC,SAAP,GAAsC;AAClC,WAAOC,KAAK,CAACF,mBAAmB,CAACG,UAApB,GACTH,mBAAmB,CAACI,aADZ,CAAZ;AAEH;;AAED,SAAOC,SAAP,CAAiBC,IAAjB,EACiBC,CADjB,EAEiBC,CAFjB,EAGiBC,KAHjB,EAGmD;AAC/C,UAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY;AACxB,uBAAiB;AADO,KAAZ,CAAhB;AAGA,UAAMC,OAAO,GAAG;AACZF,MAAAA,OADY;AAEZG,MAAAA,WAAW,EAAC,SAFA,CAEU;;AAFV,KAAhB;AAIA,QAAIC,MAAM,GAAG;AACTJ,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,uCAA+B;AAF1B;AADA,KAAb;AAMA,WAAOX,KAAK,CAACgB,IAAN,CAAWf,mBAAmB,CAACG,UAApB,GACdH,mBAAmB,CAACgB,WADjB,EAEH;AACIC,MAAAA,WAAW,EAAC,IADhB;AAEAC,MAAAA,MAAM,EAAE,MAFR;AAGAR,MAAAA,OAAO,EAAE;AAAC,wBAAe,kBAAhB;AACL,uCAA+B;AAD1B,OAHT;AAKAS,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CACV;AACIC,QAAAA,SAAS,EAAEhB,IADf;AAEQiB,QAAAA,OAAO,EAAEhB,CAFjB;AAGIiB,QAAAA,OAAO,EAAEhB,CAHb;AAIIC,QAAAA,KAAK,EAAEA;AAJX,OADU;AALN,KAFG,EAcIgB,IAdJ,CAcSC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAdrB,EAcsCC,KAdtC,CAc4CC,CAAC,IAAI;AAAC,aAAO,EAAP;AAAU,KAd5D,CAAP;AAeH;;AAED,SAAOC,WAAP,CAAmBR,SAAnB,EAAyD;AACrD,WAAOpB,KAAK,CAACF,mBAAmB,CAACG,UAApB,GACTH,mBAAmB,CAAC+B,qBADX,GACmCT,SADpC,CAAZ;AAEH;;AAED,SAAOU,QAAP,CAAgBC,OAAhB,EAAsD;AAClD,WAAO/B,KAAK,CAACF,mBAAmB,CAACG,UAApB,GACTH,mBAAmB,CAACkC,gBADX,GAET,GAFS,GAEHD,OAAO,CAACE,IAAR,CAAa,GAAb,CAFE,CAAZ;AAGH;;AAxDqB;;AAApBnC,mB,CAEKG,U,GAAa,uB;AAFlBH,mB,CAGKI,a,GAAgB,oB;AAHrBJ,mB,CAIKgB,W,GAAc,W;AAJnBhB,mB,CAKK+B,qB,GAAwB,kB;AAL7B/B,mB,CAMKkC,gB,GAAmB,Q;AAqD9B,eAAelC,mBAAf","sourcesContent":["import axios from 'axios';\nclass ChallengesApiClient {\n\n    static SERVER_URL = 'http://localhost:8080';\n    static GET_CHALLENGE = '/challenges/random';\n    static POST_RESULT = '/attempts';\n    static GET_ATTEMPTS_BY_ALIAS = '/attempts?alias=';\n    static GET_USERS_BY_IDS = '/users';\n\n    static challenge(): Promise<Response> {\n        return fetch(ChallengesApiClient.SERVER_URL +\n            ChallengesApiClient.GET_CHALLENGE);\n    }\n\n    static sendGuess(user: string,\n                     a: number,\n                     b: number,\n                     guess: number): Promise<Response> {\n        const headers = new Headers({\n            'Authorization': '0ZHJadMU0KI6'\n        });\n        const options = {\n            headers,\n            credentials:\"include\" // Вот, что нужно задать\n        };\n        let config = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                'Access-Control-Allow-Origin': '*',\n            }\n        }\n        return axios.post(ChallengesApiClient.SERVER_URL +\n            ChallengesApiClient.POST_RESULT,\n            {\n                crossDomain:true,\n            method: 'POST',\n            headers: {'Content-Type':'application/json',\n                'Access-Control-Allow-Origin': '*'},\n            body: JSON.stringify(\n        {\n            userAlias: user,\n                factorA: a,\n            factorB: b,\n            guess: guess\n            })\n                }).then(response => response.json()).catch(r => {return {}});\n    }\n\n    static getAttempts(userAlias: string): Promise<Response> {\n        return fetch(ChallengesApiClient.SERVER_URL +\n            ChallengesApiClient.GET_ATTEMPTS_BY_ALIAS + userAlias);\n    }\n\n    static getUsers(userIds: number[]): Promise<Response> {\n        return fetch(ChallengesApiClient.SERVER_URL +\n            ChallengesApiClient.GET_USERS_BY_IDS +\n            '/' + userIds.join(','));\n    }\n}\n\nexport default ChallengesApiClient;\n"]},"metadata":{},"sourceType":"module"}
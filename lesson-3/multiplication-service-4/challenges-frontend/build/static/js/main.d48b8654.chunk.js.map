{"version":3,"sources":["services/ChallengesApiClient.js","components/LastAttemptsComponent.js","services/GameApiClient.js","components/LeaderBoardComponent.js","components/ChallengeComponent.js","App.js","serviceWorker.js","index.js"],"names":["ChallengesApiClient","fetch","SERVER_URL","GET_CHALLENGE","user","a","b","guess","Headers","axios","post","POST_RESULT","userAlias","factorA","factorB","headers","then","response","json","catch","r","GET_ATTEMPTS_BY_ALIAS","userIds","GET_USERS_BY_IDS","join","LastAttemptsComponent","this","props","lastAttempts","map","key","id","style","color","correct","resultAttempt","React","GameApiClient","GET_LEADERBOARD","LeaderBoardComponent","state","leaderboard","serverError","refreshLeaderBoard","setInterval","bind","leaderBoard","lbRes","ok","Promise","reject","getUsers","usRes","lb","setState","getLeaderBoardData","lbData","row","userId","length","getUserAliasData","data","userMap","Map","forEach","idAlias","set","alias","get","updateLeaderBoard","reason","console","log","totalScore","badges","className","ChallengeComponent","message","handleSubmitResult","handleChange","refreshChallenge","challenge","res","updateMessage","event","name","target","value","preventDefault","sendGuess","updateLastAttempts","m","getAttempts","attempts","item","push","onSubmit","type","maxLength","onChange","min","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.d48b8654.chunk.js","sourcesContent":["import axios from 'axios';\nclass ChallengesApiClient {\n\n    static SERVER_URL = 'http://localhost:8080';\n    static GET_CHALLENGE = '/challenges/random';\n    static POST_RESULT = '/attempts';\n    static GET_ATTEMPTS_BY_ALIAS = '/attempts?alias=';\n    static GET_USERS_BY_IDS = '/users';\n\n    static challenge(): Promise<Response> {\n        return fetch(ChallengesApiClient.SERVER_URL +\n            ChallengesApiClient.GET_CHALLENGE);\n    }\n\n    static sendGuess(user: string,\n                     a: number,\n                     b: number,\n                     guess: number): Promise<Response> {\n        const headers = new Headers({\n            'Authorization': '0ZHJadMU0KI6'\n        });\n        const options = {\n            headers,\n            credentials:\"include\" // Вот, что нужно задать\n        };\n        let config = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                'Access-Control-Allow-Origin': '*',\n            },\n        }\n        return axios.post(ChallengesApiClient.SERVER_URL +\n            ChallengesApiClient.POST_RESULT,\n            {\n            userAlias: user,\n                factorA: a,\n            factorB: b,\n            guess: guess\n            }, config\n                ).then(response => response.json()).catch(r => {return {}});\n    }\n\n    static getAttempts(userAlias: string): Promise<Response> {\n        return fetch(ChallengesApiClient.SERVER_URL +\n            ChallengesApiClient.GET_ATTEMPTS_BY_ALIAS + userAlias);\n    }\n\n    static getUsers(userIds: number[]): Promise<Response> {\n        return fetch(ChallengesApiClient.SERVER_URL +\n            ChallengesApiClient.GET_USERS_BY_IDS +\n            '/' + userIds.join(','));\n    }\n}\n\nexport default ChallengesApiClient;\n","import * as React from 'react';\n\nclass LastAttemptsComponent extends React.Component {\n\n    render() {\n        return (\n            <table>\n                <thead>\n                <tr>\n                    <th>Challenge</th>\n                    <th>Your guess</th>\n                    <th>Correct</th>\n                </tr>\n                </thead>\n                <tbody>\n                {this.props.lastAttempts.map(a =>\n                    <tr key={a.id}\n                        style={{ color: a.correct ? 'green' : 'red' }}>\n                        <td>{a.factorA} x {a.factorB}</td>\n                        <td>{a.resultAttempt}</td>\n                        <td>{a.correct ? \"Correct\" :\n                            (\"Incorrect (\" + a.factorA * a.factorB + \")\")}</td>\n                    </tr>\n                )}\n                </tbody>\n            </table>\n        );\n    }\n}\n\nexport default LastAttemptsComponent;\n","class GameApiClient {\n    static SERVER_URL = 'http://localhost:8081';\n    static GET_LEADERBOARD = '/leaders';\n\n    static leaderBoard(): Promise<Response> {\n        return fetch(GameApiClient.SERVER_URL +\n            GameApiClient.GET_LEADERBOARD);\n    }\n\n}\n\nexport default GameApiClient;\n","import * as React from 'react';\nimport GameApiClient from '../services/GameApiClient';\nimport ChallengesApiClient from '../services/ChallengesApiClient';\n\nclass LeaderBoardComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            leaderboard: [],\n            serverError: false\n        }\n    }\n\n    componentDidMount() {\n        this.refreshLeaderBoard();\n        // sets a timer to refresh the leaderboard every 5 seconds\n        setInterval(this.refreshLeaderBoard.bind(this), 5000);\n    }\n\n    getLeaderBoardData(): Promise {\n        return GameApiClient.leaderBoard().then(\n            lbRes => {\n                if (lbRes.ok) {\n                    return lbRes.json();\n                } else {\n                    return Promise.reject(\"Gamification: error response\");\n                }\n            }\n        );\n    }\n\n    getUserAliasData(userIds: number[]): Promise {\n        return ChallengesApiClient.getUsers(userIds).then(\n            usRes => {\n                if(usRes.ok) {\n                    return usRes.json();\n                } else {\n                    return Promise.reject(\"Multiplication: error response\");\n                }\n            }\n        )\n    }\n\n    updateLeaderBoard(lb) {\n        this.setState({\n            leaderboard: lb,\n            // reset the flag\n            serverError: false\n        });\n    }\n\n    refreshLeaderBoard() {\n        this.getLeaderBoardData().then(\n            lbData => {\n                let userIds = lbData.map(row => row.userId);\n                if(userIds.length > 0) {\n                    this.getUserAliasData(userIds).then(data => {\n                        // build a map of id -> alias\n                        let userMap = new Map();\n                        data.forEach(idAlias => {\n                            userMap.set(idAlias.id, idAlias.alias);\n                        });\n                        // add a property to existing lb data\n                        lbData.forEach(row =>\n                            row['alias'] = userMap.get(row.userId)\n                        );\n                        this.updateLeaderBoard(lbData);\n                    }).catch(reason => {\n                        console.log('Error mapping user ids', reason);\n                        this.updateLeaderBoard(lbData);\n                    });\n                }\n            }\n        ).catch(reason => {\n            this.setState({ serverError: true });\n            console.log('Gamification server error', reason);\n        });\n    }\n\n    render() {\n        if (this.state.serverError) {\n            return (\n                <div>We're sorry, but we can't display game statistics at this\n                    moment.</div>\n            );\n        }\n        return (\n            <div>\n                <h3>Leaderboard</h3>\n                <table>\n                    <thead>\n                    <tr>\n                        <th>User</th>\n                        <th>Score</th>\n                        <th>Badges</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.state.leaderboard.map(row => <tr key={row.userId}>\n                        <td>{row.alias ? row.alias : row.userId}</td>\n                        <td>{row.totalScore}</td>\n                        <td>{row.badges.map(\n                            b => <span className=\"badge\" key={b}>{b}</span>)}\n                        </td>\n                    </tr>)}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nexport default LeaderBoardComponent;\n","import * as React from \"react\";\nimport ChallengesApiClient from \"../services/ChallengesApiClient\";\nimport LastAttemptsComponent from './LastAttemptsComponent';\nimport LeaderBoardComponent from './LeaderBoardComponent';\n\nclass ChallengeComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            a: '', b: '',\n            user: '',\n            message: '',\n            guess: 0,\n            lastAttempts: []\n        };\n\n\n        this.handleSubmitResult = this.handleSubmitResult.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount(): void {\n        this.refreshChallenge();\n    }\n\n    refreshChallenge() {\n        ChallengesApiClient.challenge().then(\n            res => {\n                if (res.ok) {\n                    res.json().then(json => {\n                        this.setState({\n                            a: json.factorA,\n                            b: json.factorB\n                        });\n                    });\n                } else {\n                    this.updateMessage(\"Can't reach the server\");\n                }\n            }\n        );\n    }\n\n    handleChange(event) {\n        const name = event.target.name;\n        this.setState({\n            [name]: event.target.value\n        });\n    }\n\n    handleSubmitResult(event) {\n        event.preventDefault();\n        ChallengesApiClient.sendGuess(this.state.user,\n            this.state.a, this.state.b,\n            this.state.guess)\n            .then(res => {\n                if (res.ok) {\n                    res.json().then(json => {\n                        if (json.correct) {\n                            this.updateMessage(\"Congratulations! Your guess is correct\");\n                        } else {\n                            this.updateMessage(\"Oops! Your guess \" + json.resultAttempt +\n                                \" is wrong, but keep playing!\");\n                        }\n                        this.updateLastAttempts(this.state.user);\n                        this.refreshChallenge();\n                    });\n                } else {\n                    this.updateMessage(\"Error: server error or not available\");\n                }\n            });\n    }\n\n    updateMessage(m: string) {\n        this.setState({\n            message: m\n        });\n    }\n\n    updateLastAttempts(userAlias: string) {\n        ChallengesApiClient.getAttempts(userAlias).then(res => {\n            if (res.ok) {\n                let attempts: Attempt[] = [];\n                res.json().then(data => {\n                    data.forEach(item => {\n                        attempts.push(item);\n                    });\n                    this.setState({\n                        lastAttempts: attempts\n                    });\n                })\n            }\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"display-column\">\n                <div>\n                    <h3>Your new challenge is</h3>\n                    <div className=\"challenge\">\n                        {this.state.a} x {this.state.b}\n                    </div>\n                </div>\n                <form onSubmit={this.handleSubmitResult}>\n                    <label>\n                        Your alias:\n                        <input type=\"text\" maxLength=\"12\"\n                               name=\"user\"\n                               value={this.state.user}\n                               onChange={this.handleChange}/>\n                    </label>\n                    <br/>\n                    <label>\n                        Your guess:\n                        <input type=\"number\" min=\"0\"\n                               name=\"guess\"\n                               value={this.state.guess}\n                               onChange={this.handleChange}/>\n                    </label>\n                    <br/>\n                    <input type=\"submit\" value=\"Submit\"/>\n                </form>\n                <h4>{this.state.message}</h4>\n                {this.state.lastAttempts.length > 0 &&\n                    <LastAttemptsComponent lastAttempts={this.state.lastAttempts}/>\n                }\n                <LeaderBoardComponent/>\n            </div>\n        );\n    }\n}\n\nexport default ChallengeComponent;\n","import React from 'react';\nimport './App.css';\nimport ChallengeComponent from './components/ChallengeComponent';\n\nfunction App() {\n\n\n    return <ChallengeComponent/>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}